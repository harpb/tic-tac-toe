// Generated by CoffeeScript 1.8.0
(function() {
  var app;

  app = angular.module('app');

  app.directive('ticTacToe', function() {
    return {
      scope: {},
      templateUrl: 'app/directives/tic_tac_toe.html',
      controller: function($scope, $http) {
        $scope.totalWins = 0;
        $scope.totalLoss = 0;
        $scope.totalDraws = 0;
        $scope.playerLetter = 'X';
        $scope.computerLetter = 'O';
        $scope.startingLetter = 'X';
        $scope.moves = [];
        $scope.request_next_move = function() {
          var params, request;
          params = {
            starting_letter: $scope.startingLetter,
            positions: $scope.moves
          };
          return request = $http.get('/tic_tac_toe/next_move/', {
            params: params
          }).then(function(response) {
            if (response.status === 200) {
              if (response.data.progress === 'ongoing') {
                return $scope.computerMove(response.data.next_move);
              } else {
                if (response.data.progress === 'draw') {
                  return $scope.draw();
                } else if (response.data.progress === 'player_win') {
                  return $scope.playerWin();
                } else if (response.data.progress === 'computer_win') {
                  return $scope.computerWin();
                }
              }
            }
          });
        };
        $scope.length = this.length = 3;
        $scope.board = $scope.board = [];
        $scope.master = angular.copy($scope.board);
        $scope.reset = function() {
          var cell, position, _i, _len, _ref, _results;
          console.debug('$scope.reset');
          angular.copy($scope.master, $scope.board);
          $scope.moves = [];
          _ref = _.range($scope.length * $scope.length);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            position = _ref[_i];
            cell = {
              position: position,
              active: false,
              letter: ' '
            };
            _results.push($scope.board.push(cell));
          }
          return _results;
        };
        this.playerMove = function(cell) {
          console.debug('playerMove', cell);
          $scope.request_next_move();
          cell.letter = $scope.playerLetter;
          return $scope.moves.push(cell.position);
        };
        $scope.computerMove = function(position) {
          console.debug('$scope.computerMove', position, $scope.board[position]);
          $scope.board[position].letter = $scope.computerLetter;
          $scope.board[position].active = true;
          return $scope.moves.push(position);
        };
        this.isComputer = function(cell) {
          console.log(cell.letter, $scope.computerLetter);
          return cell.letter === $scope.computerLetter;
        };
        this.isPlayer = function(cell) {
          return cell.letter === $scope.playerLetter;
        };
        $scope.computerWin = function(resigned) {
          if (resigned == null) {
            resigned = false;
          }
          console.debug('computerWin');
          $scope.totalLoss += 1;
          if (!resigned) {
            alert("You Lost~");
          }
          return $scope.reset();
        };
        $scope.playerWin = function() {
          $scope.totalWins += 1;
          alert("You Won!");
          return $scope.reset();
        };
        $scope.draw = function() {
          alert("Draw!");
          $scope.totalDraws += 1;
          return $scope.reset();
        };
        $scope.reset();
        $scope.computerWin = $scope.computerWin;
        return $scope.reset = $scope.reset;
      }
    };
  });

}).call(this);
